{"version":3,"file":"bundle.4716f386c4e3dc1d1fec.js","mappings":"yFAwCA,I,sBAhCIA,EAASC,EAAQ,KACjBC,EAAWD,EAAQ,KAGnBE,EAASC,SAASC,cAAc,gBAChCC,EAAO,IAAIC,EAAAA,EAAKJ,GAEhBK,EAAW,IAAIC,EAAAA,kBAAkB,EAAG,EAAG,GAGvCC,EAAUV,EAAOW,QAAQX,EAAOY,KAAKV,IAAWW,MAAM,EADzC,GAGbC,EAAS,IAAIC,EAAAA,MAoBRC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAO,IAAIC,EAAAA,KACbV,EACA,IAAIW,EAAAA,eAAe,CACjBC,UAAW,OACXC,eAvBgB,0IAwBhBC,aAfc,+JAgBdC,SAAU,CACRC,MAAO,CACLC,MAAO,IAAIC,EAAAA,MAAM1B,EAAOY,KAAKF,SAWrCO,EAAKU,SAASC,IACZC,KAAK7B,SAAWM,EAAKwB,WACrBD,KAAK7B,SACL6B,KAAK7B,SAAWM,EAAKwB,YAEvBb,EAAKc,MAAMC,eAAe,IAC1Bf,EAAKc,MAAME,EAAIhB,EAAKc,MAAME,EAAIJ,KAAK7B,SACnCc,EAAOoB,IAAIjB,GAGbX,EAAK6B,MAAMD,IAAIpB,GAEfR,EAAK6B,MAAMC,WAAW9B,EAAKwB,YAAc,GACzCxB,EAAK6B,MAAME,WAAW/B,EAAKwB,YAAc,GACzCxB,EAAK6B,MAAMG,WAAWhC,EAAKwB,YAAc,GAEzC,IAAIS,EAAQ,IAAIC,EAAAA,MACZC,EAAO,KACT,IAAIC,EAAcH,EAAMI,iBAExBrC,EAAKsC,OAAOjB,SAASkB,EAAIhB,KAAKiB,IAAIjB,KAAKkB,IAAkB,GAAdL,IAAsBb,KAAKmB,GACtE1C,EAAKsC,OAAOjB,SAASsB,EAAIpB,KAAKkB,IAAIlB,KAAKkB,IAAkB,GAAdL,IAAsBb,KAAKmB,GAEtE,IAAK,IAAIH,EAAI,EAAGA,EAAI/B,EAAOoC,SAASC,OAAQN,IAAK,CAC/C,IAAIO,EAActC,EAAOoC,SAASL,GAClCO,EAAYrB,MAAMc,EAChBhB,KAAKwB,IAA6C,GAAzCxB,KAAKiB,IAAkB,IAAdJ,GAAsBG,EAAI,KAAa,IAC3DO,EAAYrB,MAAME,EAChBJ,KAAKwB,IAA6C,GAAzCxB,KAAKkB,IAAkB,IAAdL,GAAsBG,EAAI,KAAa,IAC3DO,EAAYrB,MAAMkB,EAChBpB,KAAKwB,IAA6C,GAAzCxB,KAAKkB,IAAkB,IAAdL,GAAsBG,EAAI,KAAa,IAG7DvC,EAAKgD,SAASC,SACdjD,EAAKkD,SAASC,OAAOnD,EAAK6B,MAAO7B,EAAKsC,QACtCc,OAAOC,sBAAsBlB,IAG/BA","sources":["webpack:///./src/three/cubes.js"],"sourcesContent":["import {\n  BoxBufferGeometry,\n  Group,\n  Mesh,\n  ShaderMaterial,\n  Color,\n  Clock,\n} from \"../../static/utilities/three.min.js\";\nvar random = require(\"canvas-sketch-util/random\");\nvar palettes = require(\"nice-color-palettes\");\nimport { Base } from \"./base.js\";\n\nvar canvas = document.querySelector(\"canvas.cubes\");\nvar base = new Base(canvas);\n\nvar geometry = new BoxBufferGeometry(1, 1, 1);\n\nvar colorCount = 5;\nvar palette = random.shuffle(random.pick(palettes)).slice(0, colorCount);\n\nvar meshes = new Group();\n\nvar fragmentShader = `\n\t\tvarying vec2 vUv;\n\t\tuniform vec3 color;\n\n\t\tvoid main () {\n\t\t\tgl_FragColor = vec4(vec3(color * vUv.x), 1.0);\n\t\t}\n\t`;\n\nvar vertexShader = `\n\t\tvarying vec2 vUv;\n\n\t\tvoid main () {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n\t\t}\n\t`;\n\nfor (var i = 0; i < 20; i++) {\n  var mesh = new Mesh(\n    geometry,\n    new ShaderMaterial({\n      precision: \"lowp\",\n      fragmentShader,\n      vertexShader,\n      uniforms: {\n        color: {\n          value: new Color(random.pick(palette)),\n        },\n      },\n      // color: random.pick(palette),\n      // roughness: 0,\n    })\n  );\n\n  // mesh.castShadow = true;\n  // mesh.receiveShadow = true;\n\n  mesh.position.set(\n    Math.random() * base.sceneScale,\n    Math.random(),\n    Math.random() * base.sceneScale\n  );\n  mesh.scale.multiplyScalar(0.2);\n  mesh.scale.y = mesh.scale.y * Math.random();\n  meshes.add(mesh);\n}\n\nbase.scene.add(meshes);\n\nbase.scene.translateX(base.sceneScale / -2);\nbase.scene.translateZ(base.sceneScale / -2);\nbase.scene.translateY(base.sceneScale / -2);\n\nvar clock = new Clock();\nvar tick = () => {\n  var elapsedTime = clock.getElapsedTime();\n\n  base.camera.position.x = Math.cos(Math.sin(elapsedTime * 0.5)) * Math.PI;\n  base.camera.position.z = Math.sin(Math.sin(elapsedTime * 0.5)) * Math.PI;\n\n  for (var x = 0; x < meshes.children.length; x++) {\n    var currentMesh = meshes.children[x];\n    currentMesh.scale.x =\n      Math.abs(Math.cos(elapsedTime * 0.01 * (x + 1)) * 0.2) + 0.01;\n    currentMesh.scale.y =\n      Math.abs(Math.sin(elapsedTime * 0.03 * (x + 1)) * 0.3) + 0.01;\n    currentMesh.scale.z =\n      Math.abs(Math.sin(elapsedTime * 0.02 * (x + 1)) * 0.1) + 0.01;\n  }\n\n  base.controls.update();\n  base.renderer.render(base.scene, base.camera);\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n"],"names":["random","require","palettes","canvas","document","querySelector","base","Base","geometry","BoxBufferGeometry","palette","shuffle","pick","slice","meshes","Group","i","mesh","Mesh","ShaderMaterial","precision","fragmentShader","vertexShader","uniforms","color","value","Color","position","set","Math","sceneScale","scale","multiplyScalar","y","add","scene","translateX","translateZ","translateY","clock","Clock","tick","elapsedTime","getElapsedTime","camera","x","cos","sin","PI","z","children","length","currentMesh","abs","controls","update","renderer","render","window","requestAnimationFrame"],"sourceRoot":""}