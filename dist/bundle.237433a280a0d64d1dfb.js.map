{"version":3,"file":"bundle.237433a280a0d64d1dfb.js","mappings":"sGAaIA,EAASC,SAASC,cAAc,cAEhCC,EAAQ,IAAIC,EAAAA,MACZC,EAAaC,OAAOC,iBAEpBC,EAAQ,CACVC,MAAOH,OAAOI,WACdC,OAAQL,OAAOM,aAGbC,EAAQ,IAAIC,EAAAA,QAAQN,EAAMC,MAAOD,EAAMG,QAC3CL,OAAOS,iBAAiB,aAAcC,IACpCH,EAAMI,EAAID,EAAME,QAAUZ,OAAOI,WAAa,GAC9CG,EAAMM,IAAMH,EAAMI,QAAUd,OAAOM,YAAc,OAGnD,IAAIS,EAAkB,IAAIC,EAAAA,eAAe,CACvCC,UAAW,OACXC,KAAMC,EAAAA,WACNC,SAAU,CACRC,OAAQ,CACNC,MAAO,IAETC,OAAQ,CACND,MAAOf,GAETiB,MAAO,CACLF,MAAO,GAETG,KAAM,CACJH,MAAO,IAAId,EAAAA,QAAQR,OAAOI,WAAYJ,OAAOM,cAE/CoB,QAAS,CACPJ,MAAO,KAGTK,MAAO,CACLL,MAAO,IAGXM,aCrDF,sHDsDEC,eEtDF,w0HFuDEC,QAAS,CACPC,GAAIhC,EAAWiC,QAAQ,MAIvBC,EAAU,IAAIC,EAAAA,KAAK,IAAIC,EAAAA,oBAAoB,EAAG,EAAG,EAAG,GAAIpB,GAC5DrB,EAAO0C,MAAMC,gBAAkB,QAC/BxC,EAAMyC,IAAIL,GAEVjC,OAAOS,iBAAiB,UAAU,KAChCP,EAAMC,MAAQH,OAAOI,WACrBF,EAAMG,OAASL,OAAOM,YACtBS,EAAgBU,KAAO,IAAIjB,EAAAA,QAAQR,OAAOI,WAAYJ,OAAOM,aAC7DS,EAAgBQ,OAAShB,EACzBgC,EAASC,QAAQtC,EAAMC,MAAQJ,EAAYG,EAAMG,OAASN,GAC1DwC,EAASE,cAAc1C,MAEzBL,EAAOe,iBAAiB,UAAWC,IACjCA,EAAMgC,oBAGRhD,EAAOe,iBAAiB,SAAUC,IAChCA,EAAMgC,oBAGR,IAAIC,EAAS,IAAIC,EAAAA,kBAAkB,EAAG1C,EAAMC,MAAQD,EAAMG,OAAQ,EAAG,GACrER,EAAMyC,IAAIK,GAEV,IAAIJ,EAAW,IAAIM,EAAAA,cAAc,CAC/BnD,OAAQA,EACRoD,WAAW,EACXC,OAAO,EACPC,gBAAiB,qBAGnBT,EAASC,QAAQtC,EAAMC,MAAQJ,EAAYG,EAAMG,OAASN,GAE1D,IAMIkD,EAAe,CAACC,EAAUC,IAAYA,GAAuB,GAAXD,EAAiBC,GAEnEC,EAAaH,EAAa,EAAG,GAC7BI,EAAWJ,EAAa,EAAG,GAC3BK,EAAU,EAEVC,EAAgB,KAClBtB,EAAQuB,SAASpC,SAASO,MAAML,OAAS+B,EACzCpB,EAAQuB,SAASpC,SAASM,QAAQJ,OAAS8B,EAE3CnB,EAAQuB,SAASpC,SAASI,MAAMF,OAAS,IACzCiB,EAASkB,OAAO5D,EAAO8C,GACvBW,EAAUtD,OAAO0D,sBAAsBC,IAGrCA,EArBiB,KACnB1B,EAAQuB,SAASpC,SAASI,MAAMF,OAAS,IACzCiB,EAASkB,OAAO5D,EAAO8C,GACvB3C,OAAO0D,sBAAsBC,IAoB/BA,IAEAhE,SAASc,iBAAiB,gBAAiBmD,IACzCD,EAAOJ,EACPM,YAAW,KACTF,EAAO,OACPjE,EAAOoE,SACP9D,OAAO+D,qBAAqBT,KAC3B","sources":["webpack:///./src/preloader/preloader.js","webpack:///./src/preloader/vertexShader.glsl","webpack:///./src/preloader/fragmentShader.glsl"],"sourcesContent":["import {\n  Scene,\n  PerspectiveCamera,\n  Vector2,\n  ShaderMaterial,\n  DoubleSide,\n  Mesh,\n  PlaneBufferGeometry,\n  WebGLRenderer,\n} from \"../static/utilities/three.min.js\";\nimport fragmentShader from \"./fragmentShader.glsl\";\nimport vertexShader from \"./vertexShader.glsl\";\n\nvar canvas = document.querySelector(\".preloader\");\n\nvar scene = new Scene();\nvar pixelRatio = window.devicePixelRatio;\n\nvar sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nvar mouse = new Vector2(sizes.width, sizes.height);\nwindow.addEventListener(\"mousemove\", (event) => {\n  mouse.x = event.clientX / window.innerWidth - 0.5;\n  mouse.y = -(event.clientY / window.innerHeight - 0.5);\n});\n\nvar overlayMaterial = new ShaderMaterial({\n  precision: \"lowp\",\n  side: DoubleSide,\n  uniforms: {\n    uAlpha: {\n      value: 0.5,\n    },\n    uMouse: {\n      value: mouse,\n    },\n    uTime: {\n      value: 0,\n    },\n    uRes: {\n      value: new Vector2(window.innerWidth, window.innerHeight),\n    },\n    uRadius: {\n      value: 0.01,\n      // value: Math.sqrt((sizes.width / 2) ** 2 + (sizes.height / 2) ** 2),\n    },\n    uBlur: {\n      value: 4.0,\n    },\n  },\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader,\n  defines: {\n    PR: pixelRatio.toFixed(2),\n  },\n});\n\nvar overlay = new Mesh(new PlaneBufferGeometry(2, 2, 1, 1), overlayMaterial);\ncanvas.style.backgroundColor = \"unset\";\nscene.add(overlay);\n\nwindow.addEventListener(\"resize\", () => {\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n  overlayMaterial.uRes = new Vector2(window.innerWidth, window.innerHeight);\n  overlayMaterial.uMouse = mouse;\n  renderer.setSize(sizes.width * pixelRatio, sizes.height * pixelRatio);\n  renderer.setPixelRatio(pixelRatio);\n});\ncanvas.addEventListener(\"scroll\", (event) => {\n  event.preventDefault();\n});\n\ncanvas.addEventListener(\"wheel\", (event) => {\n  event.preventDefault();\n});\n\nvar camera = new PerspectiveCamera(0, sizes.width / sizes.height, 0, 0);\nscene.add(camera);\n\nvar renderer = new WebGLRenderer({\n  canvas: canvas,\n  antialias: false,\n  alpha: true,\n  powerPreference: \"high-performance\",\n});\n\nrenderer.setSize(sizes.width * pixelRatio, sizes.height * pixelRatio);\n\nvar tickBeforeStop = () => {\n  overlay.material.uniforms.uTime.value += 0.01;\n  renderer.render(scene, camera);\n  window.requestAnimationFrame(tick);\n};\n\nvar getStepValue = (duration, toValue) => toValue / ((duration * 60) / toValue);\n\nvar radiusStep = getStepValue(4, 4);\nvar blurStep = getStepValue(8, 2);\nvar timerId = 0;\n\nvar tickAfterStop = () => {\n  overlay.material.uniforms.uBlur.value -= blurStep;\n  overlay.material.uniforms.uRadius.value += radiusStep;\n\n  overlay.material.uniforms.uTime.value += 0.01;\n  renderer.render(scene, camera);\n  timerId = window.requestAnimationFrame(tick);\n};\n\nvar tick = tickBeforeStop;\n\ntick();\n\ndocument.addEventListener(\"moduleLoaded\", (e) => {\n  tick = tickAfterStop;\n  setTimeout(() => {\n    tick = () => {};\n    canvas.remove();\n    window.cancelAnimationFrame(timerId);\n  }, 6000);\n});\n","export default \"#define GLSLIFY 1\\nvarying vec2 v_uv;\\n\\nvoid main() {\\n    v_uv = uv;\\n\\n    gl_Position = vec4(position, 1.0);\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec2 uMouse;\\nuniform vec2 uRes;\\n\\nuniform float uTime;\\n\\nuniform float uRadius;\\nuniform float uBlur;\\n\\nvarying vec2 v_uv;\\n\\nfloat circle(in vec2 _st, in float _radius, in float blurriness)\\n{\\n  vec2 dist = _st;\\n  return 1.-smoothstep(_radius-(_radius*blurriness), _radius+(_radius*blurriness), dot(dist,dist)*4.0);\\n}\\n\\nvec3 mod289(vec3 x) \\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) \\n{\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise3(vec3 v)\\n{\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n  // First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n  // Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n  // Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n  //Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n  // Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nvoid main() \\n{\\n  // We manage the device ratio by passing PR constant\\n  vec2 res = uRes * PR;\\n  vec2 st = gl_FragCoord.xy / res.xy - vec2(0.5);\\n\\n  // tip: use the following formula to keep the good ratio of your coordinates\\n  st.y *= uRes.y / uRes.x;\\n\\n  // We readjust the mouse coordinates\\n  vec2 mouse = -1. * uMouse;\\n  \\n  vec2 circlePos = st + mouse;\\n  float c = circle(circlePos, uRadius, uBlur) * 2.0;\\n\\n  float offx = v_uv.x + sin(v_uv.y + uTime * .1) + .5;\\n  float offy = v_uv.y - uTime * 0.1 - cos(uTime * .01) * .01;\\n\\n  float n = snoise3(vec3(offx, offy, uTime * 0.1) * 10.) - .25;\\n\\n  float finalMask = smoothstep(0.5, 0.5, n + c);\\n\\n  vec4 transperent = vec4(0.0, 0.0, 0.0, 0.0);\\n  vec4 colors = vec4(0.02, 0.30, 0.73, 1.);\\n\\n  // vec3 finalColor = vec3(finalMask + 0.02, finalMask + 0.29, finalMask + 0.73);\\n  vec4 finalColor = mix(colors, transperent, finalMask);\\n  \\n  // if (float(finalColor) > 0.75) discard;\\n\\n  gl_FragColor = vec4(finalColor);\\n\\n}\";"],"names":["canvas","document","querySelector","scene","Scene","pixelRatio","window","devicePixelRatio","sizes","width","innerWidth","height","innerHeight","mouse","Vector2","addEventListener","event","x","clientX","y","clientY","overlayMaterial","ShaderMaterial","precision","side","DoubleSide","uniforms","uAlpha","value","uMouse","uTime","uRes","uRadius","uBlur","vertexShader","fragmentShader","defines","PR","toFixed","overlay","Mesh","PlaneBufferGeometry","style","backgroundColor","add","renderer","setSize","setPixelRatio","preventDefault","camera","PerspectiveCamera","WebGLRenderer","antialias","alpha","powerPreference","getStepValue","duration","toValue","radiusStep","blurStep","timerId","tickAfterStop","material","render","requestAnimationFrame","tick","e","setTimeout","remove","cancelAnimationFrame"],"sourceRoot":""}