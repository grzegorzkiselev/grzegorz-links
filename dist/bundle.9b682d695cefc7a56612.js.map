{"version":3,"file":"bundle.9b682d695cefc7a56612.js","mappings":"+GAcIA,EAASC,SAASC,cAAc,cAEhCC,EAAQ,IAAIC,EAAAA,MACZC,EAAaC,OAAOC,iBAEpBC,GAAa,EACjBP,SAASQ,iBAAiB,gBAAiBC,IACzCC,EAAAA,GAAAA,YAAiB,GAAG,KAClBA,EAAAA,GAAAA,GAAQC,EAAgBC,SAASC,QAAS,CACxCC,SAAU,EACVC,MAAO,IAETL,EAAAA,GAAAA,GAAQC,EAAgBC,SAASI,MAAO,CACtCF,SAAU,IACVC,MAAO,IAETE,YAAW,KACTlB,EAAOmB,SACPX,GAAa,IACZ,WAIP,IAAIY,EAAQnB,SAASC,cAAc,cAE/BmB,EAAQ,CACVC,MAAOhB,OAAOiB,WACdC,OAAQlB,OAAOmB,aAGbC,EAAQ,IAAIC,EAAAA,QAAQN,EAAMC,MAAOD,EAAMG,QAC3ClB,OAAOG,iBAAiB,aAAcmB,IACpCF,EAAMG,EAAID,EAAME,QAAUxB,OAAOiB,WAAa,GAC9CG,EAAMK,IAAMH,EAAMI,QAAU1B,OAAOmB,YAAc,OAGnD,IAAIb,EAAkB,IAAIqB,EAAAA,eAAe,CACvCC,UAAW,OACXC,KAAMC,EAAAA,WACNvB,SAAU,CACRwB,OAAQ,CACNrB,MAAO,IAETsB,OAAQ,CACNtB,MAAOU,GAETa,MAAO,CACLvB,MAAO,GAETwB,KAAM,CACJxB,MAAO,IAAIW,EAAAA,QAAQrB,OAAOiB,WAAYjB,OAAOmB,cAE/CX,QAAS,CACPE,MAAO,KAGTC,MAAO,CACLD,MAAO,IAGXyB,aC1EF,sHD2EEC,eE3EF,2zHF4EEC,QAAS,CACPC,GAAIvC,EAAWwC,QAAQ,MAIvBC,EAAU,IAAIC,EAAAA,KAAK,IAAIC,EAAAA,oBAAoB,EAAG,EAAG,EAAG,GAAIpC,GAC5DZ,EAAOiD,MAAMC,gBAAkB,QAC/B/C,EAAMgD,IAAIL,GAEVxC,OAAOG,iBAAiB,UAAU,KAChCY,EAAMC,MAAQF,EAAMgC,YACpB/B,EAAMG,OAASJ,EAAMiC,aACrBC,EAASC,QAAQlC,EAAMC,MAAQjB,EAAYgB,EAAMG,OAASnB,GAC1DiD,EAASE,cAAcnD,MAEzBL,EAAOS,iBAAiB,UAAWmB,IACjCA,EAAM6B,oBAERzD,EAAOS,iBAAiB,SAAUmB,IAChCA,EAAM6B,oBAER,IAAIC,EAAS,IAAIC,EAAAA,kBAAkB,EAAGtC,EAAMC,MAAQD,EAAMG,OAAQ,EAAG,GACrErB,EAAMgD,IAAIO,GAEV,IAAIJ,EAAW,IAAIM,EAAAA,cAAc,CAC/B5D,OAAQA,EACR6D,WAAW,EACXC,OAAO,EACPC,gBAAiB,qBAGnBT,EAASC,QAAQlC,EAAMC,MAAQjB,EAAYgB,EAAMG,OAASnB,GAE1D,IAAI2D,EAAO,KACJxD,IACHsC,EAAQmB,SAASpD,SAAS0B,MAAMvB,OAAS,IACzCsC,EAASY,OAAO/D,EAAOuD,GACvBpD,OAAO6D,sBAAsBH,KAIjCA","sources":["webpack:///./src/preloader/preloader.js","webpack:///./src/preloader/vertexShader.glsl","webpack:///./src/preloader/fragmentShader.glsl"],"sourcesContent":["import {\n  Scene,\n  PerspectiveCamera,\n  Vector2,\n  ShaderMaterial,\n  DoubleSide,\n  Mesh,\n  PlaneBufferGeometry,\n  WebGLRenderer,\n} from \"../../static/utilities/three.min.js\";\nimport fragmentShader from \"./fragmentShader.glsl\";\nimport vertexShader from \"./vertexShader.glsl\";\nimport { gsap } from \"gsap\";\n\nvar canvas = document.querySelector(\".preloader\");\n\nvar scene = new Scene();\nvar pixelRatio = window.devicePixelRatio;\n\nvar stopModule = false;\ndocument.addEventListener(\"moduleLoaded\", (e) => {\n  gsap.delayedCall(3, () => {\n    gsap.to(overlayMaterial.uniforms.uRadius, {\n      duration: 2,\n      value: 8.0,\n    });\n    gsap.to(overlayMaterial.uniforms.uBlur, {\n      duration: 1.5,\n      value: 0.0,\n    });\n    setTimeout(() => {\n      canvas.remove();\n      stopModule = true;\n    }, 2000);\n  });\n});\n\nvar frame = document.querySelector(\".preloader\");\n\nvar sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nvar mouse = new Vector2(sizes.width, sizes.height);\nwindow.addEventListener(\"mousemove\", (event) => {\n  mouse.x = event.clientX / window.innerWidth - 0.5;\n  mouse.y = -(event.clientY / window.innerHeight - 0.5);\n});\n\nvar overlayMaterial = new ShaderMaterial({\n  precision: \"lowp\",\n  side: DoubleSide,\n  uniforms: {\n    uAlpha: {\n      value: 0.5,\n    },\n    uMouse: {\n      value: mouse,\n    },\n    uTime: {\n      value: 0,\n    },\n    uRes: {\n      value: new Vector2(window.innerWidth, window.innerHeight),\n    },\n    uRadius: {\n      value: 0.01,\n      // value: Math.sqrt((sizes.width / 2) ** 2 + (sizes.height / 2) ** 2),\n    },\n    uBlur: {\n      value: 4.0,\n    },\n  },\n  vertexShader: vertexShader,\n  fragmentShader: fragmentShader,\n  defines: {\n    PR: pixelRatio.toFixed(2),\n  },\n});\n\nvar overlay = new Mesh(new PlaneBufferGeometry(2, 2, 1, 1), overlayMaterial);\ncanvas.style.backgroundColor = \"unset\";\nscene.add(overlay);\n\nwindow.addEventListener(\"resize\", () => {\n  sizes.width = frame.clientWidth;\n  sizes.height = frame.clientHeight;\n  renderer.setSize(sizes.width * pixelRatio, sizes.height * pixelRatio);\n  renderer.setPixelRatio(pixelRatio);\n});\ncanvas.addEventListener(\"scroll\", (event) => {\n  event.preventDefault();\n});\ncanvas.addEventListener(\"wheel\", (event) => {\n  event.preventDefault();\n});\nvar camera = new PerspectiveCamera(0, sizes.width / sizes.height, 0, 0);\nscene.add(camera);\n\nvar renderer = new WebGLRenderer({\n  canvas: canvas,\n  antialias: false,\n  alpha: true,\n  powerPreference: \"high-performance\",\n});\n\nrenderer.setSize(sizes.width * pixelRatio, sizes.height * pixelRatio);\n\nvar tick = () => {\n  if (!stopModule) {\n    overlay.material.uniforms.uTime.value += 0.01;\n    renderer.render(scene, camera);\n    window.requestAnimationFrame(tick);\n  }\n};\n\ntick();\n","export default \"#define GLSLIFY 1\\nvarying vec2 v_uv;\\n\\nvoid main() {\\n    v_uv = uv;\\n\\n    gl_Position = vec4(position, 1.0);\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec2 uMouse;\\nuniform vec2 uRes;\\n\\nuniform float uTime;\\n\\nuniform float uRadius;\\nuniform float uBlur;\\n\\nvarying vec2 v_uv;\\n\\nfloat circle(in vec2 _st, in float _radius, in float blurriness){\\n    vec2 dist = _st;\\n    return 1.-smoothstep(_radius-(_radius*blurriness), _radius+(_radius*blurriness), dot(dist,dist)*4.0);\\n}\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise3(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nvoid main() {\\n\\n  // We manage the device ratio by passing PR constant\\n\\tvec2 res = uRes * PR;\\n\\tvec2 st = gl_FragCoord.xy / res.xy - vec2(0.5);\\n\\t// tip: use the following formula to keep the good ratio of your coordinates\\n\\tst.y *= uRes.y / uRes.x;\\n\\n\\t// We readjust the mouse coordinates\\n\\tvec2 mouse = -1. * uMouse;\\n\\t\\n\\tvec2 circlePos = st + mouse;\\n\\tfloat c = circle(circlePos, uRadius, uBlur) * 2.0;\\n\\n\\tfloat offx = v_uv.x + sin(v_uv.y + uTime * .1) + .5;\\n\\tfloat offy = v_uv.y - uTime * 0.1 - cos(uTime * .01) * .01;\\n\\n\\tfloat n = snoise3(vec3(offx, offy, uTime * 0.1) * 10.) - .25;\\n\\n\\tfloat finalMask = smoothstep(0.5, 0.5, n + c);\\n\\n  vec4 transperent = vec4(0.0, 0.0, 0.0, 0.0);\\n  vec4 colors = vec4(0.02, 0.30, 0.73, 1.);\\n\\n\\t// vec3 finalColor = vec3(finalMask + 0.02, finalMask + 0.29, finalMask + 0.73);\\n\\tvec4 finalColor = mix(colors, transperent, finalMask);\\n  \\n\\t// if (float(finalColor) > 0.75) discard;\\n\\n\\tgl_FragColor = vec4(finalColor);\\n\\n}\";"],"names":["canvas","document","querySelector","scene","Scene","pixelRatio","window","devicePixelRatio","stopModule","addEventListener","e","gsap","overlayMaterial","uniforms","uRadius","duration","value","uBlur","setTimeout","remove","frame","sizes","width","innerWidth","height","innerHeight","mouse","Vector2","event","x","clientX","y","clientY","ShaderMaterial","precision","side","DoubleSide","uAlpha","uMouse","uTime","uRes","vertexShader","fragmentShader","defines","PR","toFixed","overlay","Mesh","PlaneBufferGeometry","style","backgroundColor","add","clientWidth","clientHeight","renderer","setSize","setPixelRatio","preventDefault","camera","PerspectiveCamera","WebGLRenderer","antialias","alpha","powerPreference","tick","material","render","requestAnimationFrame"],"sourceRoot":""}