{"version":3,"file":"bundle.48ae25c941312835bce4.js","mappings":"+GACA,MAAMA,EAASC,EAAQ,KACjBC,EAAWD,EAAQ,KAGnBE,EAASC,SAASC,cAAc,gBAChCC,EAAO,IAAIC,EAAAA,EAAKJ,GAEhBK,EAAW,IAAIC,EAAAA,kBAAwB,EAAG,EAAG,GAG7CC,EAAUV,EAAOW,QAAQX,EAAOY,KAAKV,IACxCW,MAAM,EAFU,GAIbC,EAAS,IAAIL,EAAAA,MAoBnB,IAAK,IAAIM,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAO,IAAIP,EAAAA,KACfD,EACA,IAAIC,EAAAA,eAAqB,CACvBQ,UAAW,OACXC,eAvBkB,0IAwBlBC,aAfgB,+JAgBhBC,SAAU,CACRC,MAAO,CACLC,MAAO,IAAIb,EAAAA,MAAYT,EAAOY,KAAKF,SAW3CM,EAAKO,SAASC,IACZC,KAAKzB,SAAWM,EAAKoB,WACrBD,KAAKzB,SACLyB,KAAKzB,SAAWM,EAAKoB,YAEvBV,EAAKW,MAAMC,eAAe,IAC1BZ,EAAKW,MAAME,EAAIb,EAAKW,MAAME,EAAIJ,KAAKzB,SACnCc,EAAOgB,IAAId,GAGbV,EAAKyB,MAAMD,IAAIhB,GAEfR,EAAKyB,MAAMC,WAAW1B,EAAKoB,YAAc,GACzCpB,EAAKyB,MAAME,WAAW3B,EAAKoB,YAAc,GACzCpB,EAAKyB,MAAMG,WAAW5B,EAAKoB,YAAc,GAEzC,MAAMS,EAAQ,IAAI1B,EAAAA,MACZ2B,EAAO,KACX,MAAMC,EAAcF,EAAMG,iBAE1BhC,EAAKiC,OAAOhB,SAASiB,EAAIf,KAAKgB,IAAIhB,KAAKiB,IAAkB,GAAdL,IAAsBZ,KAAKkB,GACtErC,EAAKiC,OAAOhB,SAASqB,EAAInB,KAAKiB,IAAIjB,KAAKiB,IAAkB,GAAdL,IAAsBZ,KAAKkB,GAEtE,IAAK,IAAIH,EAAI,EAAGA,EAAI1B,EAAO+B,SAASC,OAAQN,IAAK,CAC/C,IAAIO,EAAcjC,EAAO+B,SAASL,GAClCO,EAAYpB,MAAMa,EAAIf,KAAKuB,IAAgD,GAA3CvB,KAAKgB,IAAmB,IAAdJ,GAAuBG,EAAI,KAAc,IACnFO,EAAYpB,MAAME,EAAIJ,KAAKuB,IAAgD,GAA3CvB,KAAKiB,IAAmB,IAAdL,GAAuBG,EAAI,KAAc,IACnFO,EAAYpB,MAAMiB,EAAInB,KAAKuB,IAAgD,GAA3CvB,KAAKiB,IAAmB,IAAdL,GAAuBG,EAAI,KAAc,IAGrFlC,EAAK2C,SAASC,SACd5C,EAAK6C,SAASC,OAAO9C,EAAKyB,MAAOzB,EAAKiC,QACtCc,OAAOC,sBAAsBlB,IAG/BA","sources":["webpack:///./src/three/cubes.js"],"sourcesContent":["import * as THREE from '../../static/utilities/three.min.js'\nconst random = require(\"canvas-sketch-util/random\");\nconst palettes = require(\"nice-color-palettes\");\nimport { Base }  from \"./base.js\"\n\nconst canvas = document.querySelector('canvas.cubes')\nconst base = new Base(canvas)\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n\nconst colorCount = 5;\nconst palette = random.shuffle(random.pick(palettes))\n  .slice(0, colorCount);\n\nconst meshes = new THREE.Group();\n\nconst fragmentShader = `\n\t\tvarying vec2 vUv;\n\t\tuniform vec3 color;\n\n\t\tvoid main () {\n\t\t\tgl_FragColor = vec4(vec3(color * vUv.x), 1.0);\n\t\t}\n\t`;\n\nconst vertexShader = `\n\t\tvarying vec2 vUv;\n\n\t\tvoid main () {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n\t\t}\n\t`;\n\nfor (let i = 0; i < 20; i++) {\n  const mesh = new THREE.Mesh(\n    geometry,\n    new THREE.ShaderMaterial({\n      precision: \"lowp\",\n      fragmentShader,\n      vertexShader,\n      uniforms: {\n        color: {\n          value: new THREE.Color(random.pick(palette))\n        }\n      },\n      // color: random.pick(palette),\n      // roughness: 0,\n    })\n  );\n\n  // mesh.castShadow = true;\n  // mesh.receiveShadow = true;\n\n  mesh.position.set(\n    Math.random() * base.sceneScale,\n    Math.random(),\n    Math.random() * base.sceneScale\n  );\n  mesh.scale.multiplyScalar(0.2);\n  mesh.scale.y = mesh.scale.y * Math.random();\n  meshes.add(mesh)\n};\n\nbase.scene.add(meshes);\n\nbase.scene.translateX(base.sceneScale / -2);\nbase.scene.translateZ(base.sceneScale / -2);\nbase.scene.translateY(base.sceneScale / -2);\n\nconst clock = new THREE.Clock()\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime()\n\n  base.camera.position.x = Math.cos(Math.sin(elapsedTime * 0.5)) * Math.PI;\n  base.camera.position.z = Math.sin(Math.sin(elapsedTime * 0.5)) * Math.PI;\n\n  for (let x = 0; x < meshes.children.length; x++) {\n    let currentMesh = meshes.children[x];\n    currentMesh.scale.x = Math.abs((Math.cos((elapsedTime * 0.01) * (x + 1)) * 0.2)) + 0.01;\n    currentMesh.scale.y = Math.abs((Math.sin((elapsedTime * 0.03) * (x + 1)) * 0.3)) + 0.01;\n    currentMesh.scale.z = Math.abs((Math.sin((elapsedTime * 0.02) * (x + 1)) * 0.1)) + 0.01;\n  }\n\n  base.controls.update()\n  base.renderer.render(base.scene, base.camera)\n  window.requestAnimationFrame(tick)\n}\n\ntick()\n"],"names":["random","require","palettes","canvas","document","querySelector","base","Base","geometry","THREE","palette","shuffle","pick","slice","meshes","i","mesh","precision","fragmentShader","vertexShader","uniforms","color","value","position","set","Math","sceneScale","scale","multiplyScalar","y","add","scene","translateX","translateZ","translateY","clock","tick","elapsedTime","getElapsedTime","camera","x","cos","sin","PI","z","children","length","currentMesh","abs","controls","update","renderer","render","window","requestAnimationFrame"],"sourceRoot":""}