{"version":3,"file":"bundle.d0b346b4576d9a673338.js","mappings":"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","sources":["webpack:///./src/three/base.js","webpack:///./src/three/cubes.js"],"sourcesContent":["// import * as THREE from '../../static/utilities/three.min.js'\nimport { Scene, OrthographicCamera, Vector3, sRGBEncoding, ReinhardToneMapping, WebGLRenderer } from \"../../static/utilities/three.min.js\";\nimport {\n  OrbitControls\n} from '../../static/utilities/OrbitControls.js'\n\nconst frame = document.querySelector(\".display__project\");\n\nconst sizes = {\n  width: frame.clientWidth * 2,\n  height: frame.clientHeight * 2\n}\n\nclass Base {\n  constructor(canvas) {\n    this.scene = new Scene()\n    this.sceneScale = 1;\n\n    this.camera = new OrthographicCamera();\n    this.camera.position.set(0, 0, -4);\n    this.camera.lookAt(new Vector3());\n    this.camera.near = -15\n    this.camera.far = 15\n    this.scene.add(this.camera)\n\n    this.renderer = new WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    })\n\n    this.renderer.setSize(sizes.width, sizes.height)\n    this.renderer.setClearColor(\"hsl(0, 0%, 95%)\", 1);\n    this.renderer.outputEncoding = sRGBEncoding\n    this.renderer.toneMapping = ReinhardToneMapping\n    this.renderer.toneMappingExposure = 3\n\n    this.controls = new OrbitControls(this.camera, canvas)\n    this.enableDamping = true\n\n    window.addEventListener('resize', () => {\n      // Update sizes\n      sizes.width = frame.clientWidth\n      sizes.height = frame.clientHeight\n\n      // Update camera\n      this.camera.aspect = sizes.width / sizes.height\n\n      // Ortho zoom\n      const zoom = 1.0;\n\n      // Bounds\n      this.camera.left = -zoom * this.camera.aspect;\n      this.camera.right = zoom * this.camera.aspect;\n      this.camera.top = zoom;\n      this.camera.bottom = -zoom;\n\n      // Near/Far\n      this.camera.near = -50;\n      this.camera.far = 50;\n\n      // Set position & look at world center\n      this.camera.position.set(zoom, zoom, zoom);\n      // camera.position.set(0, 0, 1);\n      this.camera.lookAt(new Vector3());\n\n      // Update the camera\n      this.camera.updateProjectionMatrix();\n\n      // Update renderer\n      this.renderer.setSize(sizes.width, sizes.height)\n      this.renderer.setPixelRatio(2)\n    })\n  }\n}\n\nexport {\n  Base\n};\n","// import * as THREE from '../../static/utilities/three.min.js'\nimport { BoxBufferGeometry, Group, Mesh, ShaderMaterial, Color, Clock } from \"../../static/utilities/three.min.js\";\nconst random = require(\"canvas-sketch-util/random\");\nconst palettes = require(\"nice-color-palettes\");\nimport { Base }  from \"./base.js\"\n\nconst canvas = document.querySelector('canvas.cubes')\nconst base = new Base(canvas)\n\nconst geometry = new BoxBufferGeometry(1, 1, 1);\n\nconst colorCount = 5;\nconst palette = random.shuffle(random.pick(palettes))\n  .slice(0, colorCount);\n\nconst meshes = new Group();\n\nconst fragmentShader = `\n\t\tvarying vec2 vUv;\n\t\tuniform vec3 color;\n\n\t\tvoid main () {\n\t\t\tgl_FragColor = vec4(vec3(color * vUv.x), 1.0);\n\t\t}\n\t`;\n\nconst vertexShader = `\n\t\tvarying vec2 vUv;\n\n\t\tvoid main () {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n\t\t}\n\t`;\n\nfor (let i = 0; i < 20; i++) {\n  const mesh = new Mesh(\n    geometry,\n    new ShaderMaterial({\n      precision: \"lowp\",\n      fragmentShader,\n      vertexShader,\n      uniforms: {\n        color: {\n          value: new Color(random.pick(palette))\n        }\n      },\n      // color: random.pick(palette),\n      // roughness: 0,\n    })\n  );\n\n  // mesh.castShadow = true;\n  // mesh.receiveShadow = true;\n\n  mesh.position.set(\n    Math.random() * base.sceneScale,\n    Math.random(),\n    Math.random() * base.sceneScale\n  );\n  mesh.scale.multiplyScalar(0.2);\n  mesh.scale.y = mesh.scale.y * Math.random();\n  meshes.add(mesh)\n};\n\nbase.scene.add(meshes);\n\nbase.scene.translateX(base.sceneScale / -2);\nbase.scene.translateZ(base.sceneScale / -2);\nbase.scene.translateY(base.sceneScale / -2);\n\nconst clock = new Clock()\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime()\n\n  base.camera.position.x = Math.cos(Math.sin(elapsedTime * 0.5)) * Math.PI;\n  base.camera.position.z = Math.sin(Math.sin(elapsedTime * 0.5)) * Math.PI;\n\n  for (let x = 0; x < meshes.children.length; x++) {\n    let currentMesh = meshes.children[x];\n    currentMesh.scale.x = Math.abs((Math.cos((elapsedTime * 0.01) * (x + 1)) * 0.2)) + 0.01;\n    currentMesh.scale.y = Math.abs((Math.sin((elapsedTime * 0.03) * (x + 1)) * 0.3)) + 0.01;\n    currentMesh.scale.z = Math.abs((Math.sin((elapsedTime * 0.02) * (x + 1)) * 0.1)) + 0.01;\n  }\n\n  base.controls.update()\n  base.renderer.render(base.scene, base.camera)\n  window.requestAnimationFrame(tick)\n}\n\ntick()\n"],"names":["frame","document","querySelector","sizes","width","clientWidth","height","clientHeight","Base","constructor","canvas","this","scene","Scene","sceneScale","camera","OrthographicCamera","position","set","lookAt","Vector3","near","far","add","renderer","WebGLRenderer","antialias","setSize","setClearColor","outputEncoding","sRGBEncoding","toneMapping","ReinhardToneMapping","toneMappingExposure","controls","OrbitControls","enableDamping","window","addEventListener","aspect","left","right","top","bottom","updateProjectionMatrix","setPixelRatio","random","require","palettes","base","geometry","BoxBufferGeometry","palette","shuffle","pick","slice","meshes","Group","i","mesh","Mesh","ShaderMaterial","precision","fragmentShader","vertexShader","uniforms","color","value","Color","Math","scale","multiplyScalar","y","translateX","translateZ","translateY","clock","Clock","tick","elapsedTime","getElapsedTime","x","cos","sin","PI","z","children","length","currentMesh","abs","update","render","requestAnimationFrame"],"sourceRoot":""}