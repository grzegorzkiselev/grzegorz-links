{"version":3,"file":"bundle.0df41e30fd40dea1fe56.js","mappings":"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","sources":["webpack:///./src/three/cubes.js"],"sourcesContent":["import { Scene } from 'three/src/scenes/scene';\nimport { BoxBufferGeometry } from \"three/src/geometries/BoxBufferGeometry.js\"\nimport { Group } from \"three/src/objects/Group.js\"\nimport { Mesh } from \"three/src/objects/Mesh.js\"\nimport { ShaderMaterial } from 'three/src/materials/ShaderMaterial.js';\nimport { Color } from \"three/src/math/Color.js\"\nimport { Vector3 } from \"three/src/math/Vector3.js\"\nimport { OrthographicCamera } from \"three/src/cameras/OrthographicCamera.js\"\nimport { WebGLRenderer } from 'three/src/renderers/WebGLRenderer';\nimport { Clock } from 'three/src/core/Clock.js';\nimport { OrbitControls } from '../../static/draco/OrbitControls.js'\n\nconst sRGBEncoding = 3001;\nconst ReinhardToneMapping = 2;\n\nconst random = require(\"canvas-sketch-util/random\");\nconst palettes = require(\"nice-color-palettes\");\n\nconst canvas = document.querySelector('canvas.cubes')\n\n// Scene\nconst scene = new Scene()\nconst sceneScale = 1;\n\n/**\n * Models\n */\n// Setup a geometry\n\tconst geometry = new BoxBufferGeometry(1, 1, 1);\n\n\t// Setup a material\n\tconst colorCount = 5;\n\tconst palette = random.shuffle(random.pick(palettes))\n\t.slice(0, colorCount);\n\n\t// Setup a mesh with geometry + material\n\n\tconst meshes = new Group();\n\n\tconst fragmentShader = `\n\t\tvarying vec2 vUv;\n\t\tuniform vec3 color;\n\n\t\tvoid main () {\n\t\t\tgl_FragColor = vec4(vec3(color * vUv.x), 1.0);\n\t\t}\n\t`;\n\n\tconst vertexShader = `\n\t\tvarying vec2 vUv;\n\n\t\tvoid main () {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n\t\t}\n\t`;\n\n\tfor (let i = 0; i < 20; i++) {\n\tconst mesh = new Mesh(\n\t\tgeometry,\n\t\tnew ShaderMaterial({\n\t\t\tfragmentShader,\n\t\t\tvertexShader,\n\t\t\tuniforms: {\n\t\t\t\tcolor: { value: new Color(random.pick(palette)) }\n\t\t\t},\n\t\t// color: random.pick(palette),\n\t\t// roughness: 0,\n\t\t})\n\t);\n\n\t// mesh.castShadow = true;\n\t// mesh.receiveShadow = true;\n\n\tmesh.position.set(\n\t\tMath.random() * sceneScale,\n\t\tMath.random(),\n\t\tMath.random() * sceneScale\n\t);\n\tmesh.scale.multiplyScalar(0.2);\n\tmesh.scale.y = mesh.scale.y * Math.random();\n\tmeshes.add(mesh)\n\t};\n\n\tscene.add(meshes);\n\n\tscene.translateX(sceneScale / -2);\n\tscene.translateZ(sceneScale / -2);\n\tscene.translateY(sceneScale / -2);\n\n\n/**\n * Sizes\n */\nconst frame = document.querySelector(\".display__project\");\n\nconst sizes = {\n\twidth: frame.clientWidth * 2,\n    height: frame.clientHeight * 2\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = frame.clientWidth\n    sizes.height = frame.clientHeight\n\n    // Update camera\n\tcamera.aspect = sizes.width / sizes.height\n\t\n\t// Ortho zoom\n\tconst zoom = 1.0;\n\n\t// Bounds\n\tcamera.left = -zoom * camera.aspect;\n\tcamera.right = zoom * camera.aspect;\n\tcamera.top = zoom;\n\tcamera.bottom = -zoom;\n\n\t// Near/Far\n\tcamera.near = -100;\n\tcamera.far = 100;\n\n\t// Set position & look at world center\n\tcamera.position.set(zoom, zoom, zoom);\n\t// camera.position.set(0, 0, 1);\n\tcamera.lookAt(new Vector3());\n\n\t// Update the camera\n\tcamera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n\trenderer.setPixelRatio(2)\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new OrthographicCamera();\ncamera.position.set(0, 0, -4);\ncamera.lookAt(new Vector3());\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setClearColor(\"hsl(0, 0%, 95%)\", 1);\nrenderer.outputEncoding = sRGBEncoding\nrenderer.toneMapping = ReinhardToneMapping\nrenderer.toneMappingExposure = 3\n\n/**\n * Animate\n */\nconst clock = new Clock()\n\nconst tick = () => {\n\t\n\tconst elapsedTime = clock.getElapsedTime()\n\t\n\tcamera.position.x = Math.cos(Math.sin(elapsedTime * 0.5)) * Math.PI;\n\tcamera.position.z = Math.sin(Math.sin(elapsedTime * 0.5)) * Math.PI;\n\nfor (let x = 0; x < meshes.children.length; x++) {\n\tlet currentMesh = meshes.children[x];\n\tcurrentMesh.scale.x = Math.abs((Math.cos((elapsedTime * 0.01) * (x + 1)) * 0.2)) + 0.01;\n\tcurrentMesh.scale.y = Math.abs((Math.sin((elapsedTime * 0.03) * (x + 1)) * 0.3)) + 0.01;\n\tcurrentMesh.scale.z = Math.abs((Math.sin((elapsedTime * 0.02) * (x + 1)) * 0.1)) + 0.01;\n}\n\n\t// Update controls\n\tcontrols.update()\n\t\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["random","require","palettes","canvas","document","querySelector","scene","Scene","geometry","BoxBufferGeometry","palette","shuffle","pick","slice","meshes","Group","i","mesh","Mesh","ShaderMaterial","fragmentShader","vertexShader","uniforms","color","value","Color","position","set","Math","scale","multiplyScalar","y","add","translateX","sceneScale","translateZ","translateY","frame","sizes","width","clientWidth","height","clientHeight","window","addEventListener","camera","aspect","left","right","top","bottom","near","far","lookAt","Vector3","updateProjectionMatrix","renderer","setSize","setPixelRatio","OrthographicCamera","controls","OrbitControls","enableDamping","WebGLRenderer","antialias","setClearColor","outputEncoding","toneMapping","toneMappingExposure","clock","Clock","tick","elapsedTime","getElapsedTime","x","cos","sin","PI","z","children","length","currentMesh","abs","update","render","requestAnimationFrame"],"sourceRoot":""}