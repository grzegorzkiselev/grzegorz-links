{"version":3,"file":"bundle.d2951c2511be073bf208.js","mappings":"wHAQA,MAAMA,EAASC,SAASC,cAAc,cAGhCC,EAAQ,IAAIC,EAAAA,MAGlB,IAAIC,GAAa,EACjBJ,SAASK,iBAAiB,gBAAiBC,IACvCC,EAAAA,GAAAA,YAAiB,KAAK,KAClBA,EAAAA,GAAAA,GAAQC,EAAgBC,SAASC,QAAS,CAAEC,SAAU,EAAGC,KAAM,aAAcC,MAAO,KACpFN,EAAAA,GAAAA,GAAQC,EAAgBC,SAASK,MAAO,CAAEH,SAAU,EAAGE,MAAO,KAC9DE,YAAW,KACPhB,EAAOiB,SACPC,EAASC,UACTC,EAASD,UACTE,EAAOJ,SACPd,EAAMc,OAAOK,GACbA,EAAQC,SAASJ,UACjBG,EAAQE,SAASL,UACjBV,EAAgBU,UAChBhB,EAAMc,SACNZ,GAAa,EACNA,IACR,cAMX,MAAMoB,EAAQxB,SAASC,cAAc,cAE/BwB,EAAQ,CACVC,MAA2B,EAApBC,OAAOC,WACdC,OAA6B,EAArBF,OAAOG,aAGbC,EAAQ,IAAI5B,EAAAA,QAAcsB,EAAMC,MAAQ,EAAGD,EAAMI,OAAS,GAChEF,OAAOtB,iBAAiB,aAAc2B,IAClCD,EAAME,EAAID,EAAME,QAAUP,OAAOC,WAAa,GAC9CG,EAAMI,IAAMH,EAAMI,QAAUT,OAAOG,YAAc,OAIrD,MAAMtB,EAAkB,IAAIL,EAAAA,eAAqB,CAC7CkC,UAAW,OAEXC,KAAMnC,EAAAA,WACNM,SAAU,CACN8B,OAAQ,CAAE1B,MAAO,IACjB2B,OAAQ,CAAE3B,MAAOkB,GACjBU,MAAO,CAAE5B,MAAO,GAChB6B,KAAM,CAAE7B,MAAO,IAAIV,EAAAA,QAAcwB,OAAOC,WAAYD,OAAOG,cAC3DpB,QAAS,CAAEG,MAAO,KAClBC,MAAO,CAAED,MAAO,IAEpB8B,aC/DJ,sHDgEIC,eEhEJ,2zHFiEIC,QAAS,CACLC,GAAInB,OAAOoB,iBAAiBC,QAAQ,MAKtC3B,EAAU,IAAIlB,EAAAA,KAChB,IAAIA,EAAAA,oBAA0B,EAAG,EAAG,EAAG,GACvCK,GAEJT,EAAOkD,MAAMC,gBAAkB,QAC/BhD,EAAMiD,IAAI9B,GAEVM,OAAOtB,iBAAiB,UAAU,KAE9BoB,EAAMC,MAAQF,EAAM4B,YACpB3B,EAAMI,OAASL,EAAM6B,aAGrBpC,EAASqC,QAAQ7B,EAAMC,MAAOD,EAAMI,QACvCZ,EAASsC,cAAc,MAIxB,MAAMnC,EAAS,IAAIjB,EAAAA,kBAAwB,GAAIsB,EAAMC,MAAQD,EAAMI,OAAQ,GAAK,KAChFT,EAAOoC,SAASC,IAAI,EAAG,GAAI,GAC3BvD,EAAMiD,IAAI/B,GAGV,MAAMD,EAAW,IAAIuC,EAAAA,EAActC,EAAQrB,GAIrCkB,EAAW,IAAId,EAAAA,cAAoB,CACrCJ,OAAQA,EACR4D,WAAW,EACXC,OAAO,IAEX3C,EAASqC,QAAQ7B,EAAMC,MAAOD,EAAMI,QAKpC,MAAMgC,EAAO,KACLzD,IAEJiB,EAAQE,SAASd,SAASgC,MAAM5B,OAAS,IAEzCM,EAAS2C,SAET7C,EAAS8C,OAAO7D,EAAOkB,GAEvBO,OAAOqC,sBAAsBH,KAIjCA","sources":["webpack:///./src/preloader/preloader.js","webpack:///./src/preloader/vertexShader.glsl","webpack:///./src/preloader/fragmentShader.glsl"],"sourcesContent":["import * as THREE from '../../static/draco/three.min.js'\nimport fragmentShader from \"./fragmentShader.glsl\"\nimport vertexShader from \"./vertexShader.glsl\"\nimport { OrbitControls } from '../../static/draco/OrbitControls.js'\nimport { gsap } from 'gsap';\n\n\n// Canvas\nconst canvas = document.querySelector('.preloader')\n\n// Scene\nconst scene = new THREE.Scene()\n\n// Loaders\nlet stopModule = false\ndocument.addEventListener(\"moduleLoaded\", (e) => {\n    gsap.delayedCall(1.5, () => {\n        gsap.to(overlayMaterial.uniforms.uRadius, { duration: 6, ease: \"power1.out\", value: 10.00 });\n        gsap.to(overlayMaterial.uniforms.uBlur, { duration: 2, value: 0.4 });\n        setTimeout(() => {\n            canvas.remove()\n            renderer.dispose()\n            controls.dispose()\n            camera.remove()\n            scene.remove(overlay)\n            overlay.geometry.dispose()\n            overlay.material.dispose()\n            overlayMaterial.dispose()\n            scene.remove()\n            stopModule = true\n            return stopModule\n        }, \"1200\")\n        \n    })\n})\n\n// Sizes\nconst frame = document.querySelector(\".preloader\");\n\nconst sizes = {\n    width: window.innerWidth * 2,\n    height: window.innerHeight * 2\n}\n\nconst mouse = new THREE.Vector2(sizes.width / 2, sizes.height / 2);\nwindow.addEventListener('mousemove', (event) => {\n    mouse.x = event.clientX / window.innerWidth - 0.5;\n    mouse.y = -(event.clientY / window.innerHeight - 0.5);\n})\n\n// Preloader\nconst overlayMaterial = new THREE.ShaderMaterial({\n    precision: \"lowp\",\n    // transparent: true,\n    side: THREE.DoubleSide, \n    uniforms: {\n        uAlpha: { value: 0.5 },\n        uMouse: { value: mouse }, \n        uTime: { value: 0 },\n        uRes: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n        uRadius: { value: 0.01 },\n        uBlur: { value: 4.0 }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    defines: {\n        PR: window.devicePixelRatio.toFixed(1)\n    }\n\n})\n\nconst overlay = new THREE.Mesh(\n    new THREE.PlaneBufferGeometry(2, 2, 1, 1),\n    overlayMaterial\n)\ncanvas.style.backgroundColor = \"unset\"\nscene.add(overlay)\n\nwindow.addEventListener('resize', () => {\n    // Update sizes\n    sizes.width = frame.clientWidth\n    sizes.height = frame.clientHeight\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n\trenderer.setPixelRatio(2)\n})\n\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(4, 1, -4)\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\n// controls.enableDamping = true\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true,\n    alpha: true\n})\nrenderer.setSize(sizes.width, sizes.height)\n\n// Animation\n// const clock = new THREE.Clock()\n\nconst tick = () => {\n    if(!stopModule) {\n\n    overlay.material.uniforms.uTime.value += 0.01\n\n    controls.update()\n\n    renderer.render(scene, camera)\n\n    window.requestAnimationFrame(tick);\n    }\n}\n\ntick()","export default \"#define GLSLIFY 1\\nvarying vec2 v_uv;\\n\\nvoid main() {\\n    v_uv = uv;\\n\\n    gl_Position = vec4(position, 1.0);\\n}\";","export default \"#define GLSLIFY 1\\nuniform vec2 uMouse;\\nuniform vec2 uRes;\\n\\nuniform float uTime;\\n\\nuniform float uRadius;\\nuniform float uBlur;\\n\\nvarying vec2 v_uv;\\n\\nfloat circle(in vec2 _st, in float _radius, in float blurriness){\\n    vec2 dist = _st;\\n    return 1.-smoothstep(_radius-(_radius*blurriness), _radius+(_radius*blurriness), dot(dist,dist)*4.0);\\n}\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise3(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\nvoid main() {\\n\\n  // We manage the device ratio by passing PR constant\\n\\tvec2 res = uRes * PR;\\n\\tvec2 st = gl_FragCoord.xy / res.xy - vec2(0.5);\\n\\t// tip: use the following formula to keep the good ratio of your coordinates\\n\\tst.y *= uRes.y / uRes.x;\\n\\n\\t// We readjust the mouse coordinates\\n\\tvec2 mouse = -1. * uMouse;\\n\\t\\n\\tvec2 circlePos = st + mouse;\\n\\tfloat c = circle(circlePos, uRadius, uBlur) * 2.0;\\n\\n\\tfloat offx = v_uv.x + sin(v_uv.y + uTime * .1) + .5;\\n\\tfloat offy = v_uv.y - uTime * 0.1 - cos(uTime * .01) * .01;\\n\\n\\tfloat n = snoise3(vec3(offx, offy, uTime * 0.1) * 10.) - .25;\\n\\n\\tfloat finalMask = smoothstep(0.1, 0.9, n + c);\\n\\n  vec4 transperent = vec4(0.0, 0.0, 0.0, 0.0);\\n  vec4 colors = vec4(0.02, 0.30, 0.73, 1.);\\n\\n\\t// vec3 finalColor = vec3(finalMask + 0.02, finalMask + 0.29, finalMask + 0.73);\\n\\tvec4 finalColor = mix(colors, transperent, finalMask);\\n  \\n\\t// if (float(finalColor) > 0.75) discard;\\n\\n\\tgl_FragColor = vec4(finalColor);\\n\\n}\";"],"names":["canvas","document","querySelector","scene","THREE","stopModule","addEventListener","e","gsap","overlayMaterial","uniforms","uRadius","duration","ease","value","uBlur","setTimeout","remove","renderer","dispose","controls","camera","overlay","geometry","material","frame","sizes","width","window","innerWidth","height","innerHeight","mouse","event","x","clientX","y","clientY","precision","side","uAlpha","uMouse","uTime","uRes","vertexShader","fragmentShader","defines","PR","devicePixelRatio","toFixed","style","backgroundColor","add","clientWidth","clientHeight","setSize","setPixelRatio","position","set","OrbitControls","antialias","alpha","tick","update","render","requestAnimationFrame"],"sourceRoot":""}