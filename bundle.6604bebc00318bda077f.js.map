{"version":3,"file":"bundle.6604bebc00318bda077f.js","mappings":"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","sources":["webpack:///./src/three/me.js"],"sourcesContent":["import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'\nimport { gsap } from \"gsap\"\n\n// Canvas\nconst canvas = document.querySelector('canvas.me')\n\n// Scene\nconst scene = new THREE.Scene()\n\nconst blurred = document.querySelector(\".blurred\")\n// const blurred = document.querySelectorAll(\".blurred\")\n\n// Loaders\nconst loadingManager = new THREE.LoadingManager(\n    () => {\n        gsap.delayedCall(1.5, () => {\n            gsap.to(overlayMaterial.uniforms.uAlpha, { duration: 3, value: 0 });\n            blurred.style.webkitFilter = \"blur(0px)\"\n        })\n        // gsap.delayedCall(1.5, () => {\n        //     gsap.to(overlayMaterial.uniforms.uAlpha, { duration: 3, value: 0 });\n        //     blurred.forEach((b) => b.style.webkitFilter = \"blur(0px)\")\n        // })\n    }\n)\nconst textureLoader = new THREE.TextureLoader(loadingManager)\nconst gltfLoader = new GLTFLoader(loadingManager)\nconst cubeTextureLoader = new THREE.CubeTextureLoader()\nconst dracoLoader = new DRACOLoader()\ndracoLoader.setDecoderPath(\"./draco/\")\ngltfLoader.setDRACOLoader(dracoLoader)\n\n// Preloader\nconst overlayMaterial = new THREE.ShaderMaterial({\n    transparent: true,\n    uniforms: {\n        uAlpha: {\n            value: 0\n        }\n    },\n    vertexShader: `\n        void main() {\n            gl_Position = vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float uAlpha;\n        void main() {\n            gl_FragColor = vec4(0.95, 0.95, 0.95, uAlpha);\n        }`\n})\n\nconst overlay = new THREE.Mesh(\n    new THREE.PlaneBufferGeometry(2, 2, 1, 1),\n    overlayMaterial\n)\nscene.add(overlay)\n\n// Update all materials\nconst updateAllMaterials = () => {\n    scene.traverse((child) => {\n        if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {\n            child.material.envMapIntensity = 5\n            child.material.needsUpdate = true\n            child.castShadow = true\n            child.receiveShadow = true\n        }\n    })\n}\n\n// Environment map\nconst environmentMap = cubeTextureLoader.load([\n    './textures/environmentMaps/0/px.jpg',\n    './textures/environmentMaps/0/nx.jpg',\n    './textures/environmentMaps/0/py.jpg',\n    './textures/environmentMaps/0/ny.jpg',\n    './textures/environmentMaps/0/pz.jpg',\n    './textures/environmentMaps/0/nz.jpg'\n])\nenvironmentMap.encoding = THREE.sRGBEncoding\nscene.environment = environmentMap\n\n// Textures\nconst mapTexture = textureLoader.load('./models/Draco/textures/color.jpg')\nmapTexture.encoding = THREE.sRGBEncoding;\nmapTexture.flipY = false;\n\nconst normalTexture = textureLoader.load('./models/Draco/textures/normal.jpg')\n\n// Material\nconst material = new THREE.MeshStandardMaterial({\n    map: mapTexture,\n    normalMap: normalTexture\n})\n\nconst depthMaterial = new THREE.MeshDepthMaterial({\n    depthPacking: THREE.RGBADepthPacking\n})\n\nconst customUniforms = {\n    uTime: {\n        value: 1\n    }\n}\n\nmaterial.onBeforeCompile = (shader) => {\n    shader.uniforms.uTime = customUniforms.uTime;\n\n    shader.vertexShader = shader.vertexShader.replace(\n        '#include <common>',\n        `\n            #include <common>\n\n            uniform float uTime;\n\n            mat2 rotate2dRotateMatrix(float _angle){\n                return mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n            }\n        `\n    );\n\n    shader.vertexShader = shader.vertexShader.replace(\n        '#include <beginnormal_vertex>',\n        `\n            #include <beginnormal_vertex>\n            \n            float angle = sin(position.y + uTime) * 1.3;\n\n            mat2 rotateMatrix = rotate2dRotateMatrix(angle);\n            objectNormal.xy = rotateMatrix * objectNormal.xy;\n        `\n    )\n\n    shader.vertexShader = shader.vertexShader.replace(\n        '#include <begin_vertex>',\n        `\n            #include <begin_vertex>\n\n            transformed.xy = rotateMatrix * transformed.xy;\n        `\n    );\n}\n\ndepthMaterial.onBeforeCompile = (shader) => {\n    shader.uniforms.uTime = customUniforms.uTime;\n    shader.vertexShader = shader.vertexShader.replace(\n        '#include <common>',\n        `\n            #include <common>\n\n            uniform float uTime;\n\n            mat2 rotate2dRotateMatrix(float _angle){\n                return mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n            }\n        `\n    );\n    shader.vertexShader = shader.vertexShader.replace(\n        '#include <begin_vertex>',\n        `\n            #include <begin_vertex>\n            float angle = sin(position.y + uTime) * 1.3;\n\n            mat2 rotateMatrix = rotate2dRotateMatrix(angle);\n            transformed.xy = rotateMatrix * transformed.xy;\n        `\n    );\n}\n\n// Model\ngltfLoader.load(\n    './models/Draco/me.glb',\n    (gltf) => {\n        const mesh = gltf.scene.children[0]\n        mesh.rotation.y = Math.PI * 1\n        mesh.scale.set(3, 3, 3)\n        mesh.material = material\n        mesh.customDepthMaterial = depthMaterial\n        scene.add(mesh)\n        updateAllMaterials()\n    }\n)\n\n// Light\nconst ambientLight = new THREE.AmbientLight(0xffffff, 2)\nscene.add(ambientLight)\n\nconst directionalLight = new THREE.DirectionalLight('#ffffff', 3)\ndirectionalLight.castShadow = true\ndirectionalLight.shadow.mapSize.set(512, 512)\ndirectionalLight.shadow.camera.far = 4\ndirectionalLight.shadow.normalBias = 0.05\ndirectionalLight.position.set(0.25, 2, -2.25)\nscene.add(directionalLight)\n\n// Sizes\nconst frame = document.querySelector(\".display__project\");\n\nconst sizes = {\n    width: frame.clientWidth * 2,\n    height: frame.clientHeight * 2\n}\n\nwindow.addEventListener('resize', () => {\n    // Update sizes\n    sizes.width = frame.clientWidth\n    sizes.height = frame.clientHeight\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n\trenderer.setPixelRatio(2)\n})\n\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(4, 1, -4)\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setClearColor(\"hsl(0, 0%, 95%)\", 1);\nrenderer.outputEncoding = THREE.sRGBEncoding\nrenderer.toneMapping = THREE.ACESFilmicToneMapping\nrenderer.toneMappingExposure = 1\nrenderer.shadowMap.enabled = true\nrenderer.shadowMap.type = THREE.PCFShadowMap\nrenderer.physicallyCorrectLights = true\n\n// Animation\nconst clock = new THREE.Clock()\nconst tick = () => {\n    const elapsedTime = clock.getElapsedTime()\n\n    customUniforms.uTime.value = elapsedTime * 4;\n\n    controls.update()\n\n    renderer.render(scene, camera)\n\n    window.requestAnimationFrame(tick);\n\n}\n\ntick()"],"names":["canvas","document","querySelector","scene","THREE","blurred","loadingManager","gsap","overlayMaterial","uniforms","uAlpha","duration","value","style","webkitFilter","textureLoader","gltfLoader","GLTFLoader","cubeTextureLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","transparent","vertexShader","fragmentShader","overlay","add","environmentMap","load","encoding","environment","mapTexture","flipY","normalTexture","material","map","normalMap","depthMaterial","depthPacking","customUniforms","uTime","onBeforeCompile","shader","replace","gltf","mesh","children","rotation","y","Math","PI","scale","set","customDepthMaterial","traverse","child","envMapIntensity","needsUpdate","castShadow","receiveShadow","ambientLight","directionalLight","shadow","mapSize","camera","far","normalBias","position","frame","sizes","width","clientWidth","height","clientHeight","window","addEventListener","renderer","setSize","setPixelRatio","controls","OrbitControls","enableDamping","antialias","setClearColor","outputEncoding","toneMapping","toneMappingExposure","shadowMap","enabled","type","physicallyCorrectLights","clock","tick","elapsedTime","getElapsedTime","update","render","requestAnimationFrame"],"sourceRoot":""}