{"version":3,"file":"bundle.53a643559585f3bb7013.js","mappings":"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","sources":["webpack:///./src/three/flowers.js"],"sourcesContent":["import { Scene } from 'three/src/scenes/scene';\nimport { Group } from \"three/src/objects/Group.js\"\nimport { Mesh } from \"three/src/objects/Mesh.js\"\nimport { SphereBufferGeometry } from 'three/src/geometries/SphereBufferGeometry.js';\nimport { ShaderMaterial } from 'three/src/materials/ShaderMaterial.js';\nimport { Color } from \"three/src/math/Color.js\"\nimport { Vector3 } from \"three/src/math/Vector3.js\"\nimport { OrthographicCamera } from \"three/src/cameras/OrthographicCamera.js\"\nimport { WebGLRenderer } from 'three/src/renderers/WebGLRenderer';\nimport { Clock } from 'three/src/core/Clock.js';\nimport { OrbitControls } from '../../static/draco/OrbitControls.js'\n\nconst random = require(\"canvas-sketch-util/random\");\nconst palettes = require(\"nice-color-palettes\");\nconst glslify = require('glslify');\n\nconst sRGBEncoding = 3001;\nconst ReinhardToneMapping = 2;\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.flowers')\n\n// Scene\nconst scene = new Scene()\nconst sceneScale = 1;\n\n/**\n * Models\n */\n\t// Setup a geometry\n\tconst geometry = new SphereBufferGeometry(1, 128, 128);\n\n\t// Setup a material\n\tconst colorCount = 5;\n\tconst palette = random.shuffle(random.pick(palettes))\n\t.slice(0, colorCount);\n\n\tconst meshes = new Group();\n\n\tconst vertexShader = glslify([\"#define GLSLIFY 1\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tuniform float time;\\n\\n\\t\\t//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\\n\\nfloat mod289(float x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat permute(float x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat taylorInvSqrt(float r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec4 grad4(float j, vec4 ip)\\n  {\\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n  vec4 p,s;\\n\\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n  s = vec4(lessThan(p, vec4(0.0)));\\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\\n\\n  return p;\\n  }\\n\\n// (sqrt(5) - 1)/4 = F4, used once below\\n#define F4 0.309016994374947451\\n\\nfloat snoise(vec4 v)\\n  {\\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\\n                        0.276393202250021,  // 2 * G4\\n                        0.414589803375032,  // 3 * G4\\n                       -0.447213595499958); // -1 + 4 * G4\\n\\n// First corner\\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\\n  vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\n  vec4 i0;\\n  vec3 isX = step( x0.yzw, x0.xxx );\\n  vec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\n  i0.x = isX.x + isX.y + isX.z;\\n  i0.yzw = 1.0 - isX;\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\n  i0.y += isYZ.x + isYZ.y;\\n  i0.zw += 1.0 - isYZ.xy;\\n  i0.z += isYZ.z;\\n  i0.w += 1.0 - isYZ.z;\\n\\n  // i0 now contains the unique values 0,1,2,3 in each channel\\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\\n  vec4 x1 = x0 - i1 + C.xxxx;\\n  vec4 x2 = x0 - i2 + C.yyyy;\\n  vec4 x3 = x0 - i3 + C.zzzz;\\n  vec4 x4 = x0 + C.wwww;\\n\\n// Permutations\\n  i = mod289(i);\\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n  vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n  vec4 p0 = grad4(j0,   ip);\\n  vec4 p1 = grad4(j1.x, ip);\\n  vec4 p2 = grad4(j1.y, ip);\\n  vec4 p3 = grad4(j1.z, ip);\\n  vec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n  p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\n  m0 = m0 * m0;\\n  m1 = m1 * m1;\\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n  }\\n\\n\\t\\tvoid main () {\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tvec3 pos = position.xyz;\\n\\t\\t\\tpos += normal * snoise(vec4(position.xyz, time * 0.2)) * 4.0;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n\\t\\t}\\n\\t\"]);\n\n\tconst fragmentShader = glslify([\"#define GLSLIFY 1\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\t//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n\\t\\tuniform vec3 color;\\n\\t\\tuniform float time;\\n\\n\\t\\tvoid main () {\\n\\t\\t\\tfloat offset = 0.3 * snoise(vec3(vUv.xy, time * 0.1));\\n\\t\\t\\tgl_FragColor = vec4(vec3(color * vUv.x + offset), 1.0);\\n\\t\\t}\\n\\t\"]);\n\n\tfor (let i = 0; i < 11; i++) {\n\tconst mesh = new Mesh(\n\t\tgeometry,\n\t\tnew ShaderMaterial({\n\t\t\tfragmentShader,\n\t\t\tvertexShader,\n\t\t\tuniforms: {\n\t\t\t\ttime: { value: 0 },\n\t\t\t\tcolor: { value: new Color(random.pick(palette)) }\n\t\t\t},\n\t\t})\n\t);\n\n\tmesh.position.set(\n\t\tMath.random() * sceneScale,\n\t\tMath.random() * sceneScale,\n\t\tMath.random() * sceneScale\n\t);\n\t\t\n\tmesh.rotation.set(\n\t\tMath.random() * sceneScale * Math.PI,\n\t\tMath.random() * sceneScale * Math.PI,\n\t\tMath.random() * sceneScale * Math.PI\n\t);\n\t\t\n\tmesh.scale.multiplyScalar(0.2);\n\tmesh.scale.y = mesh.scale.y * Math.random();\n\tmeshes.add(mesh)\n\t};\n\n\tscene.add(meshes);\n\n\tscene.translateX(sceneScale / -2);\n\tscene.translateZ(sceneScale / -2);\n\tscene.translateY(sceneScale / -2);\n\n/**\n * Sizes\n */\nconst frame = document.querySelector(\".display__project\");\n\nconst sizes = {\n\twidth: frame.clientWidth * 2,\n    height: frame.clientHeight * 2\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = frame.clientWidth\n    sizes.height = frame.clientHeight\n\n    // Update camera\n\tcamera.aspect = sizes.width / sizes.height\n\t\n\t// Ortho zoom\n\tconst zoom = 1.0;\n\n\t// Bounds\n\tcamera.left = -zoom * camera.aspect;\n\tcamera.right = zoom * camera.aspect;\n\tcamera.top = zoom;\n\tcamera.bottom = -zoom;\n\n\t// Near/Far\n\tcamera.near = -100;\n\tcamera.far = 100;\n\n\t// Set position & look at world center\n\tcamera.position.set(zoom, zoom, zoom);\n\t// camera.position.set(0, 0, 1);\n\tcamera.lookAt(new Vector3());\n\n\t// Update the camera\n\tcamera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n\trenderer.setPixelRatio(2)\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new OrthographicCamera();\ncamera.position.set(0, 0, -4);\ncamera.lookAt(new Vector3());\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setClearColor(\"hsl(0, 0%, 95%)\", 1);\nrenderer.outputEncoding = sRGBEncoding\nrenderer.toneMapping = ReinhardToneMapping\nrenderer.toneMappingExposure = 3\n\n/**\n * Animate\n */\nconst clock = new Clock()\n\nconst tick = function() {\n\t\n\tconst time = clock.getElapsedTime()\n\t\n\tcamera.position.x = Math.cos(Math.sin(time)) * Math.PI;\n\tcamera.position.z = Math.sin(Math.sin(time)) * Math.PI;\n\n\n\t// Update time for shaders\n\tmeshes.children.forEach(mesh => { \n\t\t\tmesh.material.uniforms.time.value = time;\n\t})\n\t\n\t// Update controls\n\tcontrols.update()\n\t\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()\n"],"names":["random","require","palettes","glslify","canvas","document","querySelector","scene","Scene","geometry","SphereBufferGeometry","palette","shuffle","pick","slice","meshes","Group","vertexShader","fragmentShader","i","mesh","Mesh","ShaderMaterial","uniforms","time","value","color","Color","position","set","Math","rotation","PI","scale","multiplyScalar","y","add","translateX","sceneScale","translateZ","translateY","frame","sizes","width","clientWidth","height","clientHeight","window","addEventListener","camera","aspect","left","right","top","bottom","near","far","lookAt","Vector3","updateProjectionMatrix","renderer","setSize","setPixelRatio","OrthographicCamera","controls","OrbitControls","enableDamping","WebGLRenderer","antialias","setClearColor","outputEncoding","toneMapping","toneMappingExposure","clock","Clock","tick","getElapsedTime","x","cos","sin","z","children","forEach","material","update","render","requestAnimationFrame"],"sourceRoot":""}