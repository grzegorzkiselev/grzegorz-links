{"version":3,"file":"bundle.25dd1593bb62f07b0fd6.js","mappings":"kFAAe,ICAA,I,OCKf,IAAIA,GAAW,EAEX,iEAAiEC,KAAKC,UAAUC,WAOpF,kCACA,8DACA,8DACA,+D,SCjBA,MAAMC,EAAYC,SAASC,cAAc,WAEnCC,EAAiB,KACrB,MAAMC,EAAO,IAAIC,KACXC,EAAMF,EAAKG,UAAwC,IAA3BH,EAAKI,oBACnC,IAAIC,EAAU,IAAIJ,KAAKC,EAAO,OAE9B,OADAG,EAAUA,EAAQC,qBACXD,GAGHE,EAAW,KACf,MAAMF,EAAUN,IAChBH,EAAUY,YAAcH,GAGG,MAC3B,IAAII,EAAe,CAAC,EAAG,EAAG,GAE1BC,sBAAwBC,aAAY,KAClC,IACIC,EADcb,IACiBc,MAAM,KACzC,MAAOC,EAAOC,EAASC,GAAW,CAACC,SAASL,EAAiB,IAAKK,SAASL,EAAiB,IAAKK,SAASL,EAAiB,KAE3H,GAAIH,EAAa,IAAMK,GAClBL,EAAa,IAAMM,GACnBN,EAAa,IAAMO,EAItB,OAFAE,cAAcR,4BACdC,YAAYJ,EAAU,KAIpBE,EAAa,IAAMK,IACrBL,EAAa,KACTA,EAAa,GAAK,KAAIA,EAAa,GAAM,IAAGA,EAAa,OAE3DA,EAAa,IAAMM,IACrBN,EAAa,KACTA,EAAa,GAAK,KAAIA,EAAa,GAAM,IAAGA,EAAa,OAE3DA,EAAa,IAAMO,IACrBP,EAAa,KACTA,EAAa,GAAK,KAAIA,EAAa,GAAM,IAAGA,EAAa,OAE/Db,EAAUY,YAAcC,EAAaU,KAAK,OACzC,MAMLC,K","sources":["webpack:///./static/fonts/NewSpirit.woff2","webpack:///./static/fonts/arialnarrow-subset.woff2","webpack:///./src/script.js","webpack:///./static/utilities/clock.js"],"sourcesContent":["export default __webpack_public_path__ + \"assets/fonts/NewSpirit.woff2\";","export default __webpack_public_path__ + \"assets/fonts/arialnarrow-subset.woff2\";","import \"./../static/fonts/NewSpirit.woff2\"\nimport \"./../static/fonts/arialnarrow-subset.woff2\"\nimport \"./style.css\"\nimport \"./../static/utilities/clock.js\"\n\nlet isMobile = false;\n\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n  isMobile = true;\n  // document.querySelector(\".preloader\").remove()\n} else {\n  // import(\"./preloader/preloader.js\")\n}\n\nimport(\"./aspect-ratio/aspect-ratio.js\")\nimport(\"./three/cubes.js\")\nimport(\"./three/flowers.js\")\nimport(\"./three/me.js\")\n","const htmlClock = document.querySelector(\".mytime\")\n\nconst getCurrentTime = () => {\n  const date = new Date();\n  const UTC = date.getTime() + (date.getTimezoneOffset() * 60000);\n  let newDate = new Date(UTC + (3600000 * \"+3\"));\n  newDate = newDate.toLocaleTimeString()\n  return newDate\n}\n\nconst calcTime = () => {\n  const newDate = getCurrentTime()\n  htmlClock.textContent = newDate\n}\n\nconst initialTimeAnimation = () => {\n  let animatedTime = [0, 0, 0]\n\n  animatedClockInterval = setInterval(() => {\n    let currentTime = getCurrentTime()\n    let currentTimeArray = currentTime.split(\":\")\n    const [hours, minutes, seconds] = [parseInt(currentTimeArray[0]), parseInt(currentTimeArray[1]), parseInt(currentTimeArray[2])]\n\n    if (animatedTime[0] >= hours\n      && animatedTime[1] >= minutes\n      && animatedTime[2] >= seconds\n    ) {\n      clearInterval(animatedClockInterval)\n      setInterval(calcTime, 1000)\n      return\n    }\n\n    if (animatedTime[0] != hours) {\n      animatedTime[0]++\n      if (animatedTime[0] < 10) animatedTime[0] = `0${animatedTime[0]}`\n    }\n    if (animatedTime[1] != minutes) {\n      animatedTime[1]++\n      if (animatedTime[1] < 10) animatedTime[1] = `0${animatedTime[1]}`\n    }\n    if (animatedTime[2] != seconds) {\n      animatedTime[2]++\n      if (animatedTime[2] < 10) animatedTime[2] = `0${animatedTime[2]}`\n    }\n    htmlClock.textContent = animatedTime.join(\":\")\n  }, 100)\n\n\n  // setInterval(calcTime, 1000)\n}\n\ninitialTimeAnimation()\n"],"names":["isMobile","test","navigator","userAgent","htmlClock","document","querySelector","getCurrentTime","date","Date","UTC","getTime","getTimezoneOffset","newDate","toLocaleTimeString","calcTime","textContent","animatedTime","animatedClockInterval","setInterval","currentTimeArray","split","hours","minutes","seconds","parseInt","clearInterval","join","initialTimeAnimation"],"sourceRoot":""}